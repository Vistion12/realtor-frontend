"use client";

import { useEffect, useState } from "react";
import { Table, Button, Tag, message, Space, Modal } from "antd";
import { Request, getAllRequests, updateRequestStatus } from "../services/requests";

export default function RequestsPage() {
  const [requests, setRequests] = useState<Request[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedRequest, setSelectedRequest] = useState<Request | null>(null);

  const loadRequests = async () => {
    try {
      const data = await getAllRequests();
      setRequests(data);
    } catch (error) {
      message.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫");
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (id: string, newStatus: string) => {
    try {
      await updateRequestStatus(id, newStatus);
      message.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω");
      loadRequests();
    } catch (error) {
      message.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞");
    }
  };

  const showDetails = (request: Request) => {
    setSelectedRequest(request);
  };

  const getFieldLabel = (key: string) => {
    const labels: { [key: string]: string } = {
      'name': '–ò–º—è',
      'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
      'email': 'Email',
      'purpose': '–¶–µ–ª—å',
      'message': '–°–æ–æ–±—â–µ–Ω–∏–µ',
      'preferredDate': '–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞'
    };
    return labels[key] || key;
  };

  useEffect(() => {
    loadRequests();
  }, []);

  const getStatusColor = (status: string) => {
    const colors: { [key: string]: string } = {
      'new': 'blue',
      'in_progress': 'orange', 
      'completed': 'green'
    };
    return colors[status] || 'default';
  };

  const getStatusLabel = (status: string) => {
    const labels: { [key: string]: string } = {
      'new': '–ù–æ–≤–∞—è',
      'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return labels[status] || status;
  };

  const getTypeLabel = (type: string) => {
    const labels: { [key: string]: string } = {
      'consultation': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      'viewing': '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–∞',
      'callback': '–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫'
    };
    return labels[type] || type;
  };

  const parseMessage = (message: string) => {
    try {
      return JSON.parse(message);
    } catch (e) {
      return { message };
    }
  };

  const StatusButtons = ({ record }: { record: Request }) => (
    <Space direction="vertical" size="small">
      <Button 
        size="small" 
        type={record.status === 'new' ? 'primary' : 'default'}
        onClick={() => handleStatusChange(record.id, 'new')}
        disabled={record.status === 'new'}
      >
        –ù–æ–≤–∞—è
      </Button>
      <Button 
        size="small" 
        type={record.status === 'in_progress' ? 'primary' : 'default'}
        onClick={() => handleStatusChange(record.id, 'in_progress')}
        disabled={record.status === 'in_progress'}
      >
        –í —Ä–∞–±–æ—Ç–µ
      </Button>
      <Button 
        size="small" 
        type={record.status === 'completed' ? 'primary' : 'default'}
        onClick={() => handleStatusChange(record.id, 'completed')}
        disabled={record.status === 'completed'}
      >
        –ó–∞–≤–µ—Ä—à–µ–Ω–∞
      </Button>
    </Space>
  );

  const columns = [
    {
      title: "–¢–∏–ø –∑–∞—è–≤–∫–∏",
      dataIndex: "type",
      key: "type",
      render: (type: string) => getTypeLabel(type)
    },
    {
      title: "–ö–ª–∏–µ–Ω—Ç",
      key: "client",
      render: (record: Request) => {
        const messageData = parseMessage(record.message);
        return (
          <div>
            <div><strong>{messageData.name || record.client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong></div>
            <div style={{ fontSize: '12px', color: '#666' }}>
              üìû {messageData.phone || record.client?.phone || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}
            </div>
            {messageData.email && (
              <div style={{ fontSize: '12px', color: '#666' }}>
                üìß {messageData.email}
              </div>
            )}
          </div>
        );
      }
    },
    {
      title: "–°—Ç–∞—Ç—É—Å",
      dataIndex: "status",
      key: "status",
      render: (status: string) => (
        <Tag color={getStatusColor(status)}>
          {getStatusLabel(status)}
        </Tag>
      )
    },
    {
      title: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
      key: "statusActions",
      render: (record: Request) => <StatusButtons record={record} />
    },
    {
      title: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (date: Date) => new Date(date).toLocaleDateString('ru-RU')
    },
    {
      title: "–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏",
      key: "actions",
      render: (record: Request) => (
        <Button 
          size="small"
          onClick={() => showDetails(record)}
        >
          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
        </Button>
      )
    }
  ];

  return (
    <div style={{ padding: "20px" }}>
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 16 }}>
        <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</h1>
        <Button onClick={loadRequests} loading={loading}>
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      <Table 
        dataSource={requests} 
        columns={columns} 
        loading={loading}
        rowKey="id"
        pagination={{ pageSize: 10 }}
      />

      <Modal
        title="–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"
        open={!!selectedRequest}
        onCancel={() => setSelectedRequest(null)}
        footer={[
          <Button key="close" onClick={() => setSelectedRequest(null)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        ]}
        width={600}
      >
        {selectedRequest && (
          <div>
            <p><strong>–¢–∏–ø:</strong> {getTypeLabel(selectedRequest.type)}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> 
              <Tag color={getStatusColor(selectedRequest.status)} style={{ marginLeft: 8 }}>
                {getStatusLabel(selectedRequest.status)}
              </Tag>
            </p>
            <p><strong>–î–∞—Ç–∞:</strong> {new Date(selectedRequest.createdAt).toLocaleString('ru-RU')}</p>
            
            <div style={{ marginTop: '16px', padding: '16px', background: '#f5f5f5', borderRadius: '6px' }}>
              <h4>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</h4>
              {Object.entries(parseMessage(selectedRequest.message)).map(([key, value]) => (
                <p key={key} style={{ margin: '4px 0' }}>
                  <strong>{getFieldLabel(key)}:</strong> {String(value)}
                </p>
              ))}
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
}