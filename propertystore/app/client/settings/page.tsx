'use client';

import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  Alert, 
  Switch, 
  Divider, 
  message, 
  Spin,
  Descriptions,
  Modal,
  Tag
} from 'antd';
import { useAuth } from '../../contexts/AuthContext';
import { clientAuthService } from '../../services/clientAuth';
import { ExclamationCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';

export default function ClientSettingsPage() {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [consentLoading, setConsentLoading] = useState(false);
  const [passwordLoading, setPasswordLoading] = useState(false);
  const [consentModalVisible, setConsentModalVisible] = useState(false); // –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–ö–ò
  const { client, updateClient } = useAuth();

  useEffect(() => {
    if (client) {
      form.setFieldsValue({
        name: client.name,
        phone: client.phone,
        email: client.email,
      });
    }
  }, [client, form]);

  const handleGiveConsent = async () => {
    console.log('üî¥ TEST: handleGiveConsent called');
    setConsentModalVisible(true); // –û–¢–ö–†–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£
  };

  const handleConsentConfirm = async () => {
    setConsentLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      const ipAddress = ipData.ip;

      await clientAuthService.giveConsent(ipAddress, navigator.userAgent);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (client) {
        updateClient({ 
          ...client,
          consentToPersonalData: true,
        });
      }
      
      message.success('–°–æ–≥–ª–∞—Å–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
      setConsentModalVisible(false); // –ó–ê–ö–†–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£
    } catch (error: any) {
      message.error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è');
    } finally {
      setConsentLoading(false);
    }
  };

  const handleChangePassword = async (values: { newPassword: string; confirmPassword: string }) => {
    if (values.newPassword !== values.confirmPassword) {
      message.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (values.newPassword.length < 6) {
      message.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    setPasswordLoading(true);
    try {
      await clientAuthService.changePassword(values.newPassword);
      message.success('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
      form.setFieldsValue({
        newPassword: '',
        confirmPassword: '',
      });
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
    } finally {
      setPasswordLoading(false);
    }
  };

  if (!client) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', padding: 50 }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div>
      <h1 style={{ marginBottom: 24 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h1>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ */}
      <Card title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ" style={{ marginBottom: 24 }}>
        <Descriptions column={1} bordered>
          <Descriptions.Item label="–§–ò–û">{client.name}</Descriptions.Item>
          <Descriptions.Item label="–¢–µ–ª–µ—Ñ–æ–Ω">{client.phone}</Descriptions.Item>
          <Descriptions.Item label="Email">{client.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Descriptions.Item>
          <Descriptions.Item label="–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞">
            <Tag color={client.isAccountActive ? 'green' : 'red'}>
              {client.isAccountActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            </Tag>
          </Descriptions.Item>
        </Descriptions>
      </Card>

      {/* –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö */}
      <Card 
        title="–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" 
        style={{ marginBottom: 24 }}
        extra={
          <Switch 
            checked={client.consentToPersonalData}
            disabled={client.consentToPersonalData}
            checkedChildren="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            unCheckedChildren="–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
          />
        }
      >
        {!client.consentToPersonalData ? (
          <div>
            <Alert
              message="–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ"
              description="–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
              type="warning"
              showIcon
              style={{ marginBottom: 16 }}
            />
            <Button 
              type="primary" 
              icon={<CheckCircleOutlined />}
              loading={consentLoading}
              onClick={handleGiveConsent}
            >
              –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
            </Button>
          </div>
        ) : (
          <Alert
            message="–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            description="–í—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            type="success"
            showIcon
          />
        )}
      </Card>

      <Divider />

      {/* –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è */}
      <Card title="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è">
        <Form
          form={form}
          layout="vertical"
          onFinish={handleChangePassword}
          style={{ maxWidth: 400 }}
        >
          <Form.Item
            name="newPassword"
            label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            rules={[
              { required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å' },
              { min: 6, message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' }
            ]}
          >
            <Input.Password placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" />
          </Form.Item>

          <Form.Item
            name="confirmPassword"
            label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
            rules={[
              { required: true, message: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue('newPassword') === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'));
                },
              }),
            ]}
          >
            <Input.Password placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" />
          </Form.Item>

          <Form.Item>
            <Button 
              type="primary" 
              htmlType="submit" 
              loading={passwordLoading}
            >
              –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </Button>
          </Form.Item>
        </Form>
      </Card>

      {/* –ú–û–î–ê–õ–ö–ê –î–õ–Ø –°–û–ì–õ–ê–°–ò–Ø - –î–û–ë–ê–í–õ–Ø–ï–ú –í –ö–û–ù–ï–¶ JSX */}
      <Modal
        title="–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        open={consentModalVisible}
        onOk={handleConsentConfirm}
        onCancel={() => setConsentModalVisible(false)}
        okText="–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ"
        cancelText="–û—Ç–º–µ–Ω–∞"
        confirmLoading={consentLoading}
      >
        <div>
          <p>–Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º ‚Ññ152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª.</p>
          <p>–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è —Ü–µ–ª–µ–π —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –∏ –æ–∫–∞–∑–∞–Ω–∏—è —Ä–∏–µ–ª—Ç–æ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥.</p>
        </div>
      </Modal>
    </div>
  );
}